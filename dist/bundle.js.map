{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/City.js","webpack:///./src/cityMap.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","state","latitude","longitude","this","writeSideOfLight","document","querySelector","btnSearchCity","writeNameCity","writeLatitude","writeLongitude","btnSearchCityNear","writeNameSityNear","listState","btnSearchState","readState","writeNemeSities","newName","newState","newLatitude","newLongitude","btnAddCity","writeCitiesLocal","citiUSA","data","delimiter","cities","cleanData","split","filter","str","length","map","element","replace","conversionData","listLatitudes","elem","push","Number","listLongitudes","forEach","item","trim","addEventListener","toLowerCase","maxLatitude","Math","max","getCoordinatesLatitudes","textContent","minLatitude","min","maxLongitude","getCoordinatesLongitudes","minLongitude","resultLatitudes","resultLongitudes","distanceToСities","index","distance","sqrt","minDistance","findIndex","listStateAbbreviations","uniqueListStateAbbreviations","abbreviations","includes","resultString","join","resultListCities","ind","newCity","event","preventDefault","window","listNameCities","city","concat","toString","localStorage","setItem","getItem","sideOfLight","nearCity","stateAbbreviations","serchState","addCity","saveListCityInLocalStorage"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class City {\r\n    constructor (name, state, latitude, longitude) {\r\n        this.name = name;\r\n        this.state = state;\r\n        this.latitude = latitude; // широта\r\n        this.longitude = longitude; //долгоат\r\n    }\r\n\r\n    toString() {\r\n        return `${this.name}, ${this.state}, ${this.latitude}, ${this.longitude};`\r\n    }\r\n}\r\n\r\nexport default City;","\"use strict\";\r\nimport City from './City.js';\r\n\r\nconst writeSideOfLight = document.querySelector('.write-side-of-light'),\r\n    btnSearchCity = document.querySelector('.btn-search-city'),\r\n    writeNameCity = document.querySelector('.write-name-sity'),\r\n    writeLatitude = document.querySelector('.write-latitude'),\r\n    writeLongitude = document.querySelector('.write-longitude'),\r\n    btnSearchCityNear = document.querySelector('.btn-search-city-near'),\r\n    writeNameSityNear = document.querySelector('.write-name-sity-near'),\r\n    listState = document.querySelector('.list-state'),\r\n    btnSearchState = document.querySelector('.btn-search-state'),\r\n    readState = document.querySelector('.read-state'),\r\n    writeNemeSities = document.querySelector('.write-neme-sities'),\r\n    newName = document.querySelector('.add-city-name'),\r\n    newState = document.querySelector('.add-city-state'),\r\n    newLatitude = document.querySelector('.add-city-latitude'),\r\n    newLongitude = document.querySelector('.add-city-longitude'),\r\n    btnAddCity = document.querySelector('.add-city-submit'),\r\n    writeCitiesLocal = document.querySelector('.write-cities-local');\r\n\r\nclass CityMap {\r\n\r\n    constructor(data, delimiter) {\r\n        this.cities = [];\r\n        let dataShare = data.split(delimiter).filter(str => str || str.length !== 0);\r\n        let cleanData = dataShare.map(element => {\r\n            return element.replace(/\"/g, '').split(',');\r\n        });\r\n        this.cleanData = cleanData;\r\n        this.conversionData(cleanData);\r\n        // let = []; //список всех широт\r\n        // let listLongitudes = []; //список всех долгот))\r\n        // this.cities.map(elem => {\r\n        //     listLatitudes.push(Number(elem.latitude));\r\n        //     listLongitudes.push(Number(elem.longitude));\r\n        // });\r\n\r\n        // this.listLatitudes = listLatitudes;\r\n        // this.listLongitudes = listLongitudes;\r\n    }\r\n\r\n    getCoordinatesLatitudes () {\r\n        let listLatitudes = []; //список всех широт\r\n        this.cities.map(elem => {\r\n            listLatitudes.push(Number(elem.latitude));\r\n        });\r\n        return listLatitudes;\r\n    }\r\n\r\n    getCoordinatesLongitudes () {\r\n        let listLongitudes = []; //список всех широт\r\n        this.cities.map(elem => {\r\n            listLongitudes.push(Number(elem.longitude));\r\n        });\r\n        return listLongitudes;\r\n    }\r\n\r\n    conversionData(data) {\r\n        data.forEach(element => {\r\n            const item = new City(element[0].trim(), element[1].trim(), element[2].trim(), element[3].trim());\r\n            this.cities.push(item);\r\n        });\r\n    }\r\n\r\n    sideOfLight() {\r\n        btnSearchCity.addEventListener('click', () => {\r\n            const side = writeSideOfLight.value.trim().toLowerCase();\r\n            switch (side) {\r\n                case 'north':\r\n                    const maxLatitude = Math.max(...this.getCoordinatesLatitudes());\r\n                    this.cities.forEach(element => {\r\n                        if (maxLatitude === Number(element.latitude)) {\r\n                            writeNameCity.textContent = `Крайний город - ${element.name}`;\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n                case 'south':\r\n                    const minLatitude = Math.min(...this.getCoordinatesLatitudes());\r\n                    this.cities.forEach(element => {\r\n                        if (minLatitude === Number(element.latitude)) {\r\n                            writeNameCity.textContent = `Крайний город - ${element.name}`;\r\n                            return;\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n                case 'east':\r\n                    const maxLongitude = Math.max(...this.getCoordinatesLongitudes());\r\n                    this.cities.forEach(element => {\r\n                        if (maxLongitude === Number(element.longitude)) {\r\n                            writeNameCity.textContent = `Крайний город - ${element.name}`;\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n                case 'west':\r\n                    const minLongitude = Math.min(...this.getCoordinatesLongitudes());\r\n                    this.cities.forEach(element => {\r\n                        if (minLongitude === Number(element.longitude)) {\r\n                            writeNameCity.textContent = `Крайний город - ${element.name}`;\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    writeNameCity.textContent = `Ваши введенные данные не верны, правильный формат:West, East, North, South`;\r\n            }\r\n        });\r\n    }\r\n\r\n    nearCity() {\r\n        btnSearchCityNear.addEventListener('click', () => {\r\n            if (writeLatitude.value == '' || writeLongitude.value == '') {\r\n                writeNameSityNear.textContent = `Введите данные`;\r\n                return;\r\n            }\r\n\r\n            const resultLatitudes = this.getCoordinatesLatitudes().map(elem => writeLatitude.value - elem);\r\n            const resultLongitudes = this.getCoordinatesLongitudes().map(elem => writeLongitude.value - elem);\r\n            let distanceToСities = [];\r\n            for (let index = 0; index < resultLatitudes.length; index++) {\r\n                const distance = Math.sqrt((resultLatitudes[index] ** 2) + (resultLongitudes[index] ** 2));\r\n                distanceToСities.push(distance);\r\n            }\r\n\r\n            const minDistance = Math.min(...distanceToСities); // минимальный реззультат\r\n            const index = distanceToСities.findIndex(elem => elem === minDistance); //index ближайшего города\r\n            writeNameSityNear.textContent = `Ближайший город ${this.cities[index].name}, для ${writeLatitude.value} - широты и ${writeLongitude.value} - долготы`;\r\n        });\r\n    }\r\n\r\n    stateAbbreviations() {\r\n        btnSearchState.addEventListener('click', () => {\r\n            const listStateAbbreviations = this.cities.map(item => item.state);\r\n            let uniqueListStateAbbreviations = [];\r\n            for (let abbreviations of listStateAbbreviations) {\r\n                if (!uniqueListStateAbbreviations.includes(abbreviations)) {\r\n                    uniqueListStateAbbreviations.push(`${abbreviations}`);\r\n                }\r\n            }\r\n\r\n            let resultString = uniqueListStateAbbreviations.join(' ');\r\n            listState.textContent = `Уникальные названия штатов: \"${resultString}\"`;\r\n        });\r\n    }\r\n\r\n    serchState() {\r\n\r\n        let resultListCities = [];\r\n        readState.addEventListener('input', () => {\r\n            this.cities.forEach(elem => {\r\n                if (readState.value.length < 2) {\r\n                    resultListCities.length = 0;\r\n                }\r\n                if (elem.state.trim().toLowerCase() === readState.value.trim().toLowerCase()) {\r\n                    let index = this.cities.findIndex(ind => ind === elem);\r\n                    resultListCities.push(this.cities[index].name.trim());\r\n                }\r\n            });\r\n            writeNemeSities.textContent = resultListCities.join(', ');\r\n        });\r\n    }\r\n\r\n    addCity() {\r\n        const newCity = [];\r\n        btnAddCity.addEventListener('click', () => {\r\n            event.preventDefault();\r\n            if (newCity.length == 1) {\r\n                newCity.length = 0;\r\n            }\r\n\r\n            newCity.push([newName.value, newState.value, newLatitude.value, newLongitude.value]);\r\n            this.conversionData(newCity);\r\n        });\r\n    }\r\n\r\n    saveListCityInLocalStorage() {\r\n        window.addEventListener(\"beforeunload\", () => {\r\n            let listNameCities = \"\";\r\n            this.cities.map(city => {\r\n                listNameCities = listNameCities.concat(city.toString());\r\n            });\r\n\r\n            localStorage.setItem('dataCities', listNameCities);\r\n        });\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            let dataShare = localStorage.getItem('dataCities').split(';').filter(str => str || str.length !== 0);\r\n            let cleanData = dataShare.map(element => {\r\n                return element.replace(/\"/g, '').split(',');\r\n            });\r\n            this.cities = [];\r\n            this.conversionData(cleanData);\r\n\r\n            let listNameCities = \"\";\r\n            this.cities.map(city => {\r\n                listNameCities = listNameCities.concat(`${city.name} `);\r\n            });\r\n            writeCitiesLocal.textContent = listNameCities.trim();\r\n        });\r\n    }\r\n}\r\n\r\nexport default CityMap;","import CityMap from './cityMap.js';\r\n\r\nlet citiUSA = new CityMap ('\"Nashville, TN\", 36.17, -86.78; \"New York, NY\", 40.71, -74.00; \"Atlanta, GA\", 33.75, -84.39; \"Denver, CO\", 39.74, -104.98; \"Seattle, WA\", 47.61, -122.33; \"Los Angeles, CA\", 34.05, -118.24; \"Memphis, TN\", 35.15, -90.05;', ';');\r\n\r\ncitiUSA.sideOfLight();\r\ncitiUSA.nearCity();\r\ncitiUSA.stateAbbreviations();\r\ncitiUSA.serchState();\r\ncitiUSA.addCity();\r\ncitiUSA.saveListCityInLocalStorage();"],"sourceRoot":""}