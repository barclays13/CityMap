{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/cityMap.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","City","state","latitude","longitude","this","citiUSA","data","delimiter","cities","cleanData","split","filter","str","length","map","element","replace","conversionData","listLatitudes","listLongitudes","elem","push","Number","console","log","forEach","item","trim","writeSideOfLight","document","querySelector","btnSearchCity","writeNameCity","addEventListener","toLowerCase","maxLatitudes","Math","max","textContent","minLatitudes","min","maxLongitudes","minLongitudes","writeLatitude","writeLongitude","btnSearchCityNear","writeNameSityNear","resultLatitudes","resultLongitudes","distanceToСities","index","distance","sqrt","minDistance","findIndex","listState","listStateAbbreviations","uniqueListStateAbbreviations","abbreviations","includes","resultString","join","readState","writeNemeSities","resultListCities","ind","newName","newState","newLatitude","newLongitude","btnAddCity","newCity","event","preventDefault","writeCitiesLocal","window","listNameCities","city","concat","toString","localStorage","setItem","getItem","sideOfLight","nearCity","stateAbbreviations","serchState","addCity","saveListCityInLocalStorage"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\n\r\nclass CityMap {\r\n\r\n    constructor (data, delimiter) {\r\n        this.cities = [];\r\n        let dataShare =  data.split(delimiter).filter(str => str || str.length !== 0);\r\n\r\n        let cleanData = dataShare.map(element => {\r\n            return element.replace(/\"/g, '').split(',');\r\n        });\r\n\r\n        this.conversionData(cleanData);\r\n\r\n        let listLatitudes = [];  //список всех широт\r\n        let listLongitudes = []; //список всех долгот))\r\n        this.cities.map(elem => {\r\n            listLatitudes.push(Number(elem.latitude));\r\n            listLongitudes.push(Number(elem.longitude));\r\n        });\r\n        this.cleanData = cleanData;\r\n        this.listLatitudes = listLatitudes;\r\n        this.listLongitudes = listLongitudes;\r\n    }\r\n\r\n    conversionData (data) {\r\n        console.log('data', data);\r\n        data.forEach(element => {\r\n            const item = new City (element[0].trim(), element[1].trim(), element[2].trim(), element[3].trim());\r\n            this.cities.push(item);\r\n        });\r\n    }\r\n\r\n    sideOfLight () {  \r\n        const writeSideOfLight = document.querySelector('.write-side-of-light'),\r\n        btnSearchCity = document.querySelector('.btn-search-city'),\r\n        writeNameCity = document.querySelector('.write-name-sity');\r\n\r\n        btnSearchCity.addEventListener('click', () => {\r\n            const side = writeSideOfLight.value.trim().toLowerCase(); \r\n            switch (side) {\r\n            case 'north':\r\n                const maxLatitudes = Math.max(...this.listLatitudes);\r\n                this.cities.forEach(element => {\r\n                    if (maxLatitudes === Number(element.latitude)){\r\n                        writeNameCity.textContent = `Крайний город на - ${element.name}`;\r\n                    }\r\n                });\r\n                break;\r\n\r\n            case 'south':\r\n                const minLatitudes = Math.min(...this.listLatitudes);\r\n                this.cities.forEach(element => {\r\n                    if (minLatitudes === Number(element.latitude)){\r\n                        writeNameCity.textContent = `Крайний город на - ${element.name}`;\r\n                    }\r\n                });\r\n                break;\r\n\r\n            case 'east':\r\n                const maxLongitudes = Math.max(...this.listLongitudes);\r\n                this.cities.forEach(element => {\r\n                    if (maxLongitudes === Number(element.longitude)){\r\n                        writeNameCity.textContent = `Крайний город на - ${element.name}`;\r\n                    }\r\n                });\r\n                break;\r\n\r\n            case 'west':\r\n                const minLongitudes = Math.min(...this.listLongitudes);\r\n                this.cities.forEach(element => {\r\n                    if (minLongitudes === Number(element.longitude)){\r\n                        writeNameCity.textContent = `Крайний город на - ${element.name}`;\r\n                    }\r\n                });\r\n                break;\r\n\r\n            default:\r\n                writeNameCity.textContent = `Ваши введенные данные не верны, правильный формат:West, East, North, South`;\r\n        }\r\n        });\r\n    }\r\n\r\n    nearCity () {\r\n        const writeLatitude = document.querySelector('.write-latitude'),\r\n            writeLongitude = document.querySelector('.write-longitude'),\r\n            btnSearchCityNear = document.querySelector('.btn-search-city-near'),\r\n            writeNameSityNear = document.querySelector('.write-name-sity-near');\r\n\r\n        btnSearchCityNear.addEventListener('click', () => {\r\n            if (writeLatitude.value == '' || writeLongitude.value == ''){\r\n                writeNameSityNear.textContent = `Введите данные`;\r\n                return;\r\n            }\r\n            const resultLatitudes = this.listLatitudes.map( elem => writeLatitude.value - elem); // нахожу разность по широте\r\n            const resultLongitudes = this.listLongitudes.map( elem => writeLongitude.value - elem); // нахожу разность по долготе\r\n            let distanceToСities = [];\r\n            for (let index = 0; index < resultLatitudes.length; index++) {\r\n                const distance = Math.sqrt((resultLatitudes[index]**2) + (resultLongitudes[index]**2));\r\n                distanceToСities.push(distance);\r\n            }\r\n    \r\n            const minDistance = Math.min(...distanceToСities); // минимальный реззультат\r\n            const index = distanceToСities.findIndex(elem => elem === minDistance); //index ближайшего города\r\n            writeNameSityNear.textContent = `Ближайший город ${this.cities[index].name}, для ${writeLatitude.value} - широты и ${writeLongitude.value} - долготы`;\r\n        });\r\n    }\r\n\r\n    stateAbbreviations () {\r\n        const listState = document.querySelector('.list-state'),\r\n            btnSearchState = document.querySelector('.btn-search-state');\r\n            btnSearchState.addEventListener('click', () => {\r\n                const listStateAbbreviations = this.cities.map(item => item.state);\r\n                let uniqueListStateAbbreviations = [];\r\n                for (let abbreviations of listStateAbbreviations) {\r\n                    if (!uniqueListStateAbbreviations.includes(abbreviations)) {\r\n                        uniqueListStateAbbreviations.push(`${abbreviations}`);\r\n                    }\r\n                }\r\n                let resultString = uniqueListStateAbbreviations.join(' ');\r\n                listState.textContent = `Уникальные названия штатов: \"${resultString}\"`;\r\n            });\r\n    }\r\n\r\n    serchState () {\r\n        const readState = document.querySelector('.read-state'),\r\n        writeNemeSities = document.querySelector('.write-neme-sities'); \r\n        const nameState = [];\r\n        let resultListCities = [];\r\n\r\n        readState.addEventListener('input', () => {\r\n            \r\n            this.cities.forEach(elem => {\r\n\r\n                if (readState.value.length < 2){\r\n                    resultListCities.length = 0;\r\n                }\r\n                \r\n                if(elem.state.trim().toLowerCase() === readState.value.trim().toLowerCase()){\r\n                    let index = this.cities.findIndex(ind => ind === elem);\r\n                    resultListCities.push(this.cities[index].name.trim());\r\n                }\r\n            });\r\n\r\n            writeNemeSities.textContent = resultListCities.join(', ');\r\n        }); \r\n    }\r\n\r\n    addCity () {\r\n        const newName = document.querySelector('.add-city-name'),\r\n            newState = document.querySelector('.add-city-state'),\r\n            newLatitude = document.querySelector('.add-city-latitude'),\r\n            newLongitude = document.querySelector('.add-city-longitude'),\r\n            btnAddCity = document.querySelector('.add-city-submit'),\r\n            newCity = [];\r\n\r\n        btnAddCity.addEventListener('click', () => {\r\n            event.preventDefault();\r\n            if  (newCity.length == 1) {\r\n                newCity.length = 0;\r\n            }\r\n            \r\n            newCity.push([newName.value, newState.value, newLatitude.value, newLongitude.value]);\r\n            this.conversionData(newCity);\r\n\r\n        }); \r\n    }   \r\n\r\n    saveListCityInLocalStorage () {\r\n        const writeCitiesLocal = document.querySelector('.write-cities-local'),\r\n            removeLocalStorage = document.querySelector('.remove-local-storage');\r\n\r\n            window.addEventListener(\"beforeunload\", () => {\r\n                let listNameCities = \"\";\r\n                this.cities.map(city => {\r\n                    listNameCities = listNameCities.concat(city.toString());\r\n                });\r\n\r\n                localStorage.setItem('listCities', listNameCities);\r\n            });\r\n\r\n            window.addEventListener(\"load\", () => {\r\n                let dataShare =  localStorage.getItem('listCities').split(';').filter(str => str || str.length !== 0);\r\n\r\n                let cleanData = dataShare.map(element => {\r\n                    return element.replace(/\"/g, '').split(',');\r\n                });\r\n                this.cities = [];\r\n                this.conversionData(cleanData);\r\n\r\n                let listNameCities = \"\";\r\n                this.cities.map(city => {\r\n                    listNameCities = listNameCities.concat(`${city.name} `);\r\n                });\r\n                writeCitiesLocal.textContent = listNameCities.trim();\r\n\r\n            });\r\n\r\n    }\r\n}\r\nclass City {\r\n    constructor (name, state, latitude, longitude) {\r\n        this.name = name;\r\n        this.state = state;\r\n        this.latitude = latitude; // широта\r\n        this.longitude = longitude; //долгоат\r\n    }\r\n\r\n    toString() {\r\n        return `${this.name}, ${this.state}, ${this.latitude}, ${this.longitude};`\r\n    }\r\n}\r\n\r\nexport default CityMap;\r\n\r\n","import CityMap from './cityMap.js';\r\n\r\n\r\n\r\nlet citiUSA = new CityMap ('\"Nashville, TN\", 36.17, -86.78; \"New York, NY\", 40.71, -74.00; \"Atlanta, GA\", 33.75, -84.39; \"Denver, CO\", 39.74, -104.98; \"Seattle, WA\", 47.61, -122.33; \"Los Angeles, CA\", 34.05, -118.24; \"Memphis, TN\", 35.15, -90.05;', ';');\r\n\r\ncitiUSA.sideOfLight();\r\ncitiUSA.nearCity();\r\ncitiUSA.stateAbbreviations();\r\ncitiUSA.serchState();\r\ncitiUSA.addCity();\r\ncitiUSA.saveListCityInLocalStorage();"],"sourceRoot":""}